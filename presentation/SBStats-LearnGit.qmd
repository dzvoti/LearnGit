---
title: "GIT and GitHub"
subtitle: "Intergration with R and IDEs (e.g. Rstudio)"
author: "Liberty Mlambo"
format: 
      revealjs:
        incremental: true
        logo: data/Nottingham-logo.png
        slide-number: true
        institute: "University of Nottingham"
        standalone: true
        embed-resources: true
        preview-links: false
        # footer: "Using GIT and GitHub with R and Rstudio"
        number-sections: true
        multiplex: true
        incremental: false
        slide-tone: false
        touch: true
        toc: true
        toc-depth: 1
        toc-title: "Contents"
        auto-stretch: true
        # scrollable: true

editor: source
---

# Introduction

## Why use GIT and GitHub to collaborate?

-   Geographically spaced team
-   Speed of integrating changes
-   Different Integrated Development Environment(IDEs) preferences i.e. [RStudio](https://rstudio.com/products/rstudio/download/), [Visual Studio Code](https://code.visualstudio.com/)
-   Data security and compliance with [EU -General - - Data Protection Regulation (GDPR)](https://gdpr-info.eu/) ![](data/tools.png){fig-align="center"}

# Git

## Git

::: columns
::: {.column width="70%"}
::: {.callout-tip icon="false"}
## Open source
:::

::: {.callout-tip icon="false"}
## Tracks file changes
:::

::: {.callout-tip icon="false"}
## Branch based non-linear workflows
:::

::: {.callout-tip icon="false"}
## IDE intergration
:::

::: {.callout-tip icon="false"}
## Speed of work
:::

::: {.callout-important icon="false"}
## Local environment
:::
:::

::: {.column width="30%"}
![](data/git-icon-logo.png)
:::
:::

# GitHub

## Fremium Repository based

-   Fremium cloud based version control using Git
-   Repository based (Projects) [![](data/git-repositories-2.png)](https://github.com/dzvoti)

## Built-in security

[![](data/git-repositories-3.png)](https://github.com/dzvoti)

## File History Tracking

[![](data/git-repositories-4.png)](https://github.com/dzvoti)

## Unlimited Public/ Private Repositories

[![](data/git-repositories-5.png)](https://github.com/dzvoti)

## Track issues and task progress

[![](data/git-repositories-6.png)](https://github.com/dzvoti)

## Track issues and task progress

[![](data/git-repositories-7.png)](https://github.com/dzvoti)

## Lessons learnt

::: columns
::: {.column width="50%"}
::: {.callout-tip icon="false"}
## Cloud storage and collaboration very important and a key focus area
:::

::: {.callout-tip icon="false"}
## Reproducibility through version tracking is fundamental
:::

::: {.callout-tip icon="false"}
## Choose tools carefully to avoid security lapses
:::

::: {.callout-important icon="false"}
## CTRL + ALT + SHIFT+F (Git Urgent)
:::
:::

::: {.column width="50%"}
[![](data/git-repositories-8.png)](https://github.com/dzvoti)
:::
:::

# Practical demonstration

## Assumptions and Requirements

Assumptions

-   Computer (Mac, Windows, Linux, etc..) with administrative privileges
-   Software download and installation experience

Requirements

-   GitHub account
-   GitHub desktop
-   Git

## [Github signup](https://github.com/)

[![](data/github-signup.png)](https://github.com/)

## [Github desktop download](https://desktop.github.com/)

[![](data/git-desktop.png)](https://desktop.github.com/)

## [Github desktop documentation](https://docs.github.com/en/desktop)

[![](data/git-docs.png)](https://docs.github.com/en/desktop)

## Git glossary {.scrollable}

| command  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
|----------------------|--------------------------------------------------|
| `git init`   | `git init` turns any directory into a Git repository. [^1]                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
|`git add <path>`|The `git add` command adds new or changed files in your working directory to the Git staging area. ^[[https://github.com/git-guides/git-add#git-add](https://github.com/git-guides/git-add#git-add)]|
| `git commit` and `git commit message` | `git commit -m "descriptive commit message"` creates a commit, which is like a snapshot of your repository. These commits are snapshots of your entire repository at specific times. You should make new commits often, based around logical units of change. Over time, commits should tell a story of the history of your repository and how it came to be the way that it currently is. Commits include lots of metadata in addition to the contents and message, like the author, timestamp, and more.[^2] |


[^1]: [https://github.com/git-guides/git-init#what-does-git-init-do](https://github.com/git-guides/git-init#what-does-git-init-do)

[^2]: [https://github.com/git-guides/git-commit#git-commit](https://github.com/git-guides/git-commit#git-commit)

## [Git](https://git-scm.com/downloads)

[![](data/git-download.png)](https://git-scm.com/downloads)

# Further reading

## Further reading

-  [GitHub Docs](https://docs.github.com/en)
-  [Happy Git and GitHub for the useR](https://happygitwithr.com/)
-  [Git, GitHub, & GitHub Desktop for beginners](https://www.youtube.com/watch?v=8Dd7KRpKeaE)
